
interface point {
    x: number,
    y: number
}
function generateArray(size: number) {
    if (size % 2 !== 0) { return null }
    let array = []
    function row() {
        let row: Array<any> = []
        for (let x = 0; x < size; x++) {
            row.push("⬜")
        }
        return row
    }
    for (let y = 0; y < size; y++) {
        array.push(row())
    }
    return array;
}

function getCell(point: point, array: any) {
    try {
        return array[point.y][point.x]
    } catch (error) { console.error(error, point) }
}
function setCell(point: point, value: "⬜" | "⬛", array: any) {
    try {
        array[point.y][point.x] = value
        return array
    } catch (error) { console.error(error, point) }

}
function isDistanceCorrect(size: number, distance: number) {
    //let out = parseFloat((size * distance - (Math.floor(size * distance))).toFixed(2))
    let out = distance * 2 * size
    console.log(out)
    let equator = size ** 2

    if (out < 1.00 * equator && out > 0.93999999999 * equator) { return true } else { return false }
}
function createCircleRecursive(midpoint: point, cell: point, size: number, array: any, points: Set<any>) {

    function getDistance(point2: point): number {
        let point1 = midpoint
        //c^2 = a^2 + b^2
        //distance^2 = xDiff^2 + yDiff^2
        const xDiff = Math.abs(point1.x - point2.x)
        const yDiff = Math.abs(point1.y - point2.y)
        const distanceSquared = xDiff ** 2 + yDiff ** 2
        const distance = Math.sqrt(distanceSquared)
        return distance
    }
    const pointsToCheck = [
        { x: cell.x, y: cell.y + 1 }, //up
        { x: cell.x, y: cell.y - 1 }, //down
        { x: cell.x - 1, y: cell.y }, //left
        { x: cell.x + 1, y: cell.y }, //right
        { x: cell.x - 1, y: cell.y + 1 }, //upper left
        { x: cell.x + 1, y: cell.y + 1 }, //upper right
        { x: cell.x - 1, y: cell.y - 1 }, //lower left
        { x: cell.x + 1, y: cell.y - 1 }, //lower right
    ]
    pointsToCheck.forEach(function (point) {
        if (point.x > -1 && point.y > -1 && getCell(point, array) !== "⬛" && point.x < array.length - 1 && point.y < array.length - 1) {
            if (isDistanceCorrect(size, getDistance(point))) {
                points.add(point)
                setCell(point, "⬛", array)
                createCircleRecursive(midpoint, point, size, array, points)
            }
        }
    }, pointsToCheck)

    // if (isDistanceCorrect(size, getDistance())) {return }
}
function calculateNeighbors(cell: point, array: Array<any>) {
    if (getCell(cell, array) !== "⬛") { return 0 }
    let neighbors: number = 0;
    const pointsToCheck = [
        { x: cell.x, y: cell.y + 1 }, //up
        { x: cell.x, y: cell.y - 1 }, //down
        { x: cell.x - 1, y: cell.y }, //left
        { x: cell.x + 1, y: cell.y }, //right
        { x: cell.x - 1, y: cell.y + 1 }, //upper left
        { x: cell.x + 1, y: cell.y + 1 }, //upper right
        { x: cell.x - 1, y: cell.y - 1 }, //lower left
        { x: cell.x + 1, y: cell.y - 1 }, //lower right
    ]
    pointsToCheck.forEach(function (point) {
        if (point.x > 0 && point.y > 0 && getCell(point, array) === "⬛" && point.x < array.length - 1 && point.y < array.length - 1) {
            neighbors++;
        }
    }
    )
    return neighbors
}
function calculateCircumference(points: Set<any>, array: Array<any>) {
    let circumference: number = 0;
    /*
    points.forEach(function (element) {
        let neighbors = calculateNeighbors(element, array)
        if (neighbors < 5) {
            //circumference++;
        } else { setCell(element, "⬜", array) }
    })
    */
    points.forEach(function (element) {
        let neighbors = calculateNeighbors(element, array)
        if (neighbors > 1) {
            circumference++;
        } else { setCell(element, "⬜", array) }
    })
    return circumference /// 2;

}
function createCircle(size: number) {

    let array = generateArray(size)
    if (!array) { return false }
    try {
        //get midpoint of circle
        const midpoint: point = { x: (size / 2) + 1, y: (size / 2) + 1 }
        const origin: point = { x: 1, y: size / 2 }
        setCell(origin, "⬜", array)
        let points = new Set()
        createCircleRecursive(midpoint, origin, size, array, points)
        console.warn(calculateCircumference(points, array))
        let output = ""
        array.forEach(function (element) {
            output += element.join("")
            output += "\n"
        }, array)


        // @ts-ignore
        let out = document.getElementById("output"); out.innerHTML = output; out.style.fontSize = 437 / size; out?.style.fontSizeAdjust

        return array
    } catch (error) { console.error(error, array) }

}
